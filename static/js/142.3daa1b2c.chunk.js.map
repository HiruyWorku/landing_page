{"version":3,"file":"static/js/142.3daa1b2c.chunk.js","mappings":"yKAKA,MA2FA,EA3FgBA,KACd,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,KAChCK,EAAaC,IAAkBN,EAAAA,EAAAA,WAAS,IACxCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,IA+BnC,OACES,EAAAA,EAAAA,MAAA,WAASC,GAAG,UAAUC,UAAU,kBAAiBC,SAAA,EAC/CC,EAAAA,EAAAA,KAACC,EAAAA,EAAOC,IAAG,CACTJ,UAAU,mBACVK,QAAS,CAAEC,MAAO,KAClBC,QAAS,CAAED,MAAO,GAClBE,WAAY,CAAEC,SAAU,EAAGC,KAAM,cAEnCZ,EAAAA,EAAAA,MAACK,EAAAA,EAAOC,IAAG,CACTJ,UAAU,kBACVK,QAAS,CAAEM,QAAS,EAAGC,GAAI,IAC3BL,QAAS,CAAEI,QAAS,EAAGC,EAAG,GAC1BJ,WAAY,CAAEC,SAAU,EAAGI,MAAO,IAAMZ,SAAA,EAExCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAC,gBAC9BH,EAAAA,EAAAA,MAAA,KAAGE,UAAU,gBAAeC,SAAA,CAAC,kDACmBC,EAAAA,EAAAA,KAAA,KAAGY,KAAK,gCAA+Bb,SAAC,+BAExFH,EAAAA,EAAAA,MAAA,QAAMiB,SA/CSC,UACnBC,EAAEC,iBACFrB,EAAS,IAET,IACE,MAAMsB,QAAiBC,MAAM,gDAAiD,CAC5EC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEtC,OAAMG,QAAOE,cAGtC,IAAK2B,EAASO,GAAI,CAChB,MAAMC,QAAkBR,EAASS,OACjC,MAAM,IAAIC,MAAMF,EAAUnC,SAAW,gDACvC,CAEAG,GAAe,GACfP,EAAQ,IACRG,EAAS,IACTE,EAAW,GACb,CAAE,MAAOqC,GACPjC,EAASiC,EAAItC,QACf,GAuBiCS,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,KAAA,SACE6B,KAAK,OACLC,MAAO7C,EACP8C,SAAWhB,GAAM7B,EAAQ6B,EAAEiB,OAAOF,OAClCG,UAAQ,EACRC,YAAY,YAGhBlC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,KAAA,SACE6B,KAAK,QACLC,MAAO1C,EACP2C,SAAWhB,GAAM1B,EAAS0B,EAAEiB,OAAOF,OACnCG,UAAQ,EACRC,YAAY,aAGhBlC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,KAAA,YACE8B,MAAOxC,EACPyC,SAAWhB,GAAMxB,EAAWwB,EAAEiB,OAAOF,OACrCG,UAAQ,EACRC,YAAY,cAGfxC,IAASM,EAAAA,EAAAA,KAAA,KAAGF,UAAU,QAAOC,SAAEL,IAC/BF,IAAeQ,EAAAA,EAAAA,KAAA,KAAGF,UAAU,UAASC,SAAC,gCACvCC,EAAAA,EAAAA,KAAA,UAAQ6B,KAAK,SAAS/B,UAAU,cAAaC,SAAC,qBAEhDC,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACC,GAAG,IAAItC,UAAU,cAAaC,SAAC,4BAE/B,C","sources":["components/Contact.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Contact.css';\nimport { motion } from 'framer-motion';\nimport { Link } from 'react-router-dom';\n\nconst Contact = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n  \n    try {\n      const response = await fetch('https://efratagebremichael.com/api/send-email', {  \n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, message }),\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Something went wrong. Please try again later.');\n      }\n  \n      setIsSubmitted(true);\n      setName('');\n      setEmail('');\n      setMessage('');\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  \n  \n\n  return (\n    <section id=\"contact\" className=\"contact-section\">\n      <motion.div\n        className=\"background-image\"\n        initial={{ scale: 1.5 }}\n        animate={{ scale: 1 }}\n        transition={{ duration: 1, ease: \"easeOut\" }}\n      />\n      <motion.div\n        className=\"contact-section\"\n        initial={{ opacity: 0, y: -50 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 1, delay: 0.5 }}\n      >\n        <h2 className=\"contact-title\">Contact Me</h2>\n        <p className=\"email-contact\">\n          Get in touch or shoot me an email directly at <a href=\"mailto:hiruyworku00@gmail.com\">hiruyworku00@gmail.com</a>\n        </p>\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n              placeholder=\"Name\"\n            />\n          </div>\n          <div className=\"input-container\">\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              placeholder=\"Email\"\n            />\n          </div>\n          <div className=\"input-container\">\n            <textarea\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              required\n              placeholder=\"Message\"\n            />\n          </div>\n          {error && <p className=\"error\">{error}</p>}\n          {isSubmitted && <p className=\"success\">Message sent successfully!</p>}\n          <button type=\"submit\" className=\"send-button\">Send Message</button>\n        </form>\n        <Link to=\"/\" className=\"return-home\">Return to Homepage</Link>\n      </motion.div>\n    </section>\n  );\n};\n\nexport default Contact;\n"],"names":["Contact","name","setName","useState","email","setEmail","message","setMessage","isSubmitted","setIsSubmitted","error","setError","_jsxs","id","className","children","_jsx","motion","div","initial","scale","animate","transition","duration","ease","opacity","y","delay","href","onSubmit","async","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","err","type","value","onChange","target","required","placeholder","Link","to"],"sourceRoot":""}